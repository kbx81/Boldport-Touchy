C51 COMPILER V9.53.0.0   TOUCHY                                                            07/12/2017 22:27:34 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE TOUCHY
OBJECT MODULE PLACED IN .\src\touchy.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\kburzin
                    -ski\SimplicityStudio\v4_workspace\BoldportTouchyFidgetFirmware\src\touchy.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WAR
                    -NINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\kburzinski\Sim
                    -plicityStudio\v4_workspace\BoldportTouchyFidgetFirmware\inc\config;C:/Users/kburzinski/SimplicityStudio/v4_workspace/Bol
                    -dportTouchyFidgetFirmware/inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.4//Device/shared/si8051base;C:
                    -/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.4//Device/EFM8SB1/inc;C:/SiliconLabs/SimplicityStudio/v4/devel
                    -oper/sdks/8051/v4.0.4//Lib/efm8_capsense;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.4//Device/EFM8SB1/e
                    -fm8_capsense/device_layer) PRINT(.\src\touchy.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\touchy.OBJ)

line level    source

   1          /**
   2           * @file touchy.c
   3           * @author Keith Burzinski kbx81x@gmail.com @kbx81
   4           * @date 2017-07-08
   5           */
   6          #include <SI_EFM8SB1_Register_Enums.h>
   7          #include "touchy.h"
   8          #include "circle_slider.h"
   9          
  10          #include "cslib_config.h"
  11          #include "cslib.h"
  12          
  13          /**
  14           * define the LED pins
  15           */
  16          SI_SBIT (LED1pin, SFR_P0, 0);
  17          SI_SBIT (LED2pin, SFR_P2, 7);
  18          SI_SBIT (LED3pin, SFR_P1, 6);
  19          SI_SBIT (LED4pin, SFR_P1, 7);
  20          SI_SBIT (LED5pin, SFR_P1, 0);
  21          SI_SBIT (LED6pin, SFR_P0, 7);
  22          
  23          static uint16_t angle = 0, previousAngle = 0;
  24          static uint8_t ledState = 0, buttonState = 0, previousButtonState = 0, buttonsChanged = 0, sleepCounter = 
             -0;
  25          #ifdef DIMMER1
  26          static uint8_t intensity1 = 0;
  27          #endif
  28          #ifdef DIMMER2
  29          static uint8_t intensity2 = 0;
  30          #endif
  31          
  32          
  33          uint8_t TouchyReadLEDs(void)
  34          {
  35   1              return ledState;
  36   1      }
  37          
  38          
  39          void TouchySetLEDs(uint8_t leds)
  40          {
  41   1              // Make sure only existing LEDs are specified
  42   1              leds &= (1 << LED_COUNT) - 1;
  43   1      
  44   1              // Update the saved state of all LEDs with the requested changes.
  45   1              ledState = leds;
  46   1      
  47   1      #ifdef DIMMER1
  48   1              intensity1 = 0;
C51 COMPILER V9.53.0.0   TOUCHY                                                            07/12/2017 22:27:34 PAGE 2   

  49   1      
  50   1              if (leds & LED1) {
  51   2                      intensity1 = 255;
  52   2              }
  53   1      #endif
  54   1      #ifdef DIMMER2
  55   1              intensity2 = 0;
  56   1      
  57   1              if (leds & LED6) {
  58   2                      intensity2 = 255;
  59   2              }
  60   1      #endif
  61   1      
  62   1              TouchyLEDRefresh();
  63   1      }
  64          
  65          
  66          void TouchyLEDOff(uint8_t leds)
  67          {
  68   1              // Update the saved state of all LEDs with the requested changes
  69   1              ledState &= ~leds;
  70   1      
  71   1      #ifdef DIMMER1
  72   1              if (leds & LED1) {
  73   2                      intensity1 = 0;
  74   2              }
  75   1      #endif
  76   1      #ifdef DIMMER2
  77   1              if (leds & LED6) {
  78   2                      intensity2 = 0;
  79   2              }
  80   1      #endif
  81   1              TouchyLEDRefresh();
  82   1      }
  83          
  84          
  85          void TouchyLEDOn(uint8_t leds)
  86          {
  87   1              // Make sure only existing LEDs are specified
  88   1              leds &= (1 << LED_COUNT) - 1;
  89   1      
  90   1              // Update the saved state of all LEDs with the requested changes
  91   1              ledState |= leds;
  92   1      
  93   1      #ifdef DIMMER1
  94   1              if (leds & LED1) {
  95   2                      intensity1 = 255;
  96   2              }
  97   1      #endif
  98   1      #ifdef DIMMER2
  99   1              if (leds & LED6) {
 100   2                      intensity2 = 255;
 101   2              }
 102   1      #endif
 103   1              TouchyLEDRefresh();
 104   1      }
 105          
 106          
 107          void TouchyLEDToggle(uint8_t leds)
 108          {
 109   1              // Make sure only existing LEDs are specified
 110   1              leds &= (1 << LED_COUNT) - 1;
 111   1      
C51 COMPILER V9.53.0.0   TOUCHY                                                            07/12/2017 22:27:34 PAGE 3   

 112   1              // Update the saved state of all LEDs with the requested changes
 113   1              ledState = (~ledState & leds) | (ledState & ~leds);
 114   1      
 115   1      #ifdef DIMMER1
 116   1              if (leds & LED1) {
 117   2                      intensity1 = 255 - intensity1;
 118   2              }
 119   1      #endif
 120   1      #ifdef DIMMER2
 121   1              if (leds & LED6) {
 122   2                      intensity2 = 255 - intensity2;
 123   2              }
 124   1      #endif
 125   1              TouchyLEDRefresh();
 126   1      }
 127          
 128          
 129          void TouchySetLEDIntensity(uint8_t leds, uint8_t intensity)
 130          {
 131   1      #ifdef DIMMER1
 132   1              if (leds & LED1)
 133   1              {
 134   2                      intensity1 = intensity;
 135   2      
 136   2                      if (intensity) {
 137   3                              ledState |= LED1;
 138   3                      }
 139   2                      else {
 140   3                              ledState &= ~LED1;
 141   3                      }
 142   2      
 143   2                      if (intensity == 255)
 144   2                      {
 145   3                              PCA0CPM0 &= ~PCA0CPM0_ECOM__ENABLED;
 146   3                      }
 147   2              }
 148   1      #endif
 149   1      #ifdef DIMMER2
 150   1              if (leds & LED6)
 151   1              {
 152   2                      intensity2 = intensity;
 153   2      
 154   2                      if (intensity) {
 155   3                              ledState |= LED6;
 156   3                      }
 157   2                      else {
 158   3                              ledState &= ~LED6;
 159   3                      }
 160   2      
 161   2                      if (intensity == 255)
 162   2                      {
 163   3                              PCA0CPM1 &= ~PCA0CPM1_ECOM__ENABLED;
 164   3                      }
 165   2              }
 166   1      #endif
 167   1              TouchyLEDRefresh();
 168   1      }
 169          
 170          
 171          uint8_t TouchyReadLEDIntensity(uint8_t leds)
 172          {
 173   1              uint8_t intensity = 0;
 174   1      
C51 COMPILER V9.53.0.0   TOUCHY                                                            07/12/2017 22:27:34 PAGE 4   

 175   1      #ifdef DIMMER1
 176   1              if (leds & LED1)
 177   1              {
 178   2                      intensity = intensity1;
 179   2              }
 180   1      #endif
 181   1      #ifdef DIMMER2
 182   1              if (leds & LED6)
 183   1              {
 184   2                      intensity = intensity2;
 185   2              }
 186   1      #endif
 187   1              return intensity;
 188   1      }
 189          
 190          
 191          void TouchySleepLEDs(void)
 192          {
 193   1              LED1pin = LED2pin = LED3pin = LED4pin = LED5pin = LED6pin = true;
 194   1      
 195   1      #ifdef DIMMER1
 196   1              DIMMER1 = 0;
 197   1      #endif
 198   1      #ifdef DIMMER2
 199   1              DIMMER2 = 0;
 200   1      #endif
 201   1      
 202   1              return;
 203   1      }
 204          
 205          
 206          void TouchyLEDRefresh(void)
 207          {
 208   1              LED1pin = !((ledState >> 0) & 0x01);
 209   1              LED2pin = !((ledState >> 1) & 0x01);
 210   1              LED3pin = !((ledState >> 2) & 0x01);
 211   1              LED4pin = !((ledState >> 3) & 0x01);
 212   1              LED5pin = !((ledState >> 4) & 0x01);
 213   1              LED6pin = !((ledState >> 5) & 0x01);
 214   1      
 215   1      #ifdef DIMMER1
 216   1              DIMMER1 = intensity1;
 217   1      #endif
 218   1      #ifdef DIMMER2
 219   1              DIMMER2 = intensity2;
 220   1      #endif
 221   1      }
 222          
 223          
 224          void TouchyButtonRefresh(void)
 225          {
 226   1              buttonState = 0;
 227   1      
 228   1              if (CSLIB_isSensorSingleActive(TS_B1)) {
 229   2                      buttonState |= BUTTON1;
 230   2              }
 231   1      
 232   1              if (CSLIB_isSensorSingleActive(TS_B2)) {
 233   2                      buttonState |= BUTTON2;
 234   2              }
 235   1      
 236   1              if (CSLIB_isSensorSingleActive(TS_B3)) {
 237   2                      buttonState |= BUTTON3;
C51 COMPILER V9.53.0.0   TOUCHY                                                            07/12/2017 22:27:34 PAGE 5   

 238   2              }
 239   1      
 240   1              if (CSLIB_isSensorSingleActive(TS_B4)) {
 241   2                      buttonState |= BUTTON4;
 242   2              }
 243   1      
 244   1              if (CSLIB_isSensorSingleActive(TS_B5)) {
 245   2                      buttonState |= BUTTON5;
 246   2              }
 247   1      
 248   1              if (CSLIB_isSensorSingleActive(TS_B6)) {
 249   2                      buttonState |= BUTTON6;
 250   2              }
 251   1      
 252   1              buttonsChanged = buttonState ^ previousButtonState;
 253   1              previousButtonState = buttonState;
 254   1      
 255   1              if (buttonState) {
 256   2                      sleepCounter = 0;
 257   2              }
 258   1      
 259   1              previousAngle = angle;
 260   1              // Check if sum of sensors is above a minimum threshold for better touch release behavior
 261   1              if (IsTouchQualified())
 262   1              {
 263   2                      // Perform the centroid algorithm to determine the wheel angle position
 264   2                      // (0 degrees is 12 o'clock, 90 degrees is 3 o'clock)
 265   2                      angle = CalculatePosition();
 266   2      
 267   2                      sleepCounter = 0;
 268   2              }
 269   1      
 270   1              sleepCounter++;
 271   1      }
 272          
 273          
 274          uint8_t TouchyReadButtons(void)
 275          {
 276   1              return buttonState;
 277   1      }
 278          
 279          
 280          uint8_t TouchyGetChangedButtons(void)
 281          {
 282   1              return buttonsChanged;
 283   1      }
 284          
 285          
 286          uint8_t TouchyGetPressedButtons(void)
 287          {
 288   1              return buttonState & buttonsChanged;
 289   1      }
 290          
 291          
 292          uint8_t TouchyGetReleasedButtons(void)
 293          {
 294   1              return ~buttonState & buttonsChanged;
 295   1      }
 296          
 297          
 298          uint16_t TouchyReadSlider(void)
 299          {
 300   1              return angle;
C51 COMPILER V9.53.0.0   TOUCHY                                                            07/12/2017 22:27:34 PAGE 6   

 301   1      }
 302          
 303          
 304          int16_t TouchyReadSliderRelative(void)
 305          {
 306   1              if (angle - previousAngle > 180)
 307   1              {
 308   2                      return angle - previousAngle - 360;
 309   2              }
 310   1      
 311   1              if (previousAngle - angle > 180) {
 312   2                      return angle - previousAngle + 360;
 313   2              }
 314   1      
 315   1              return angle - previousAngle;
 316   1      }
 317          
 318          
 319          bool TouchySleepNow(void)
 320          {
 321   1              if (sleepCounter >= DEF_COUNTS_BEFORE_SLEEP) {
 322   2                      return true;
 323   2              }
 324   1      
 325   1              return false;
 326   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    499    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     11    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
