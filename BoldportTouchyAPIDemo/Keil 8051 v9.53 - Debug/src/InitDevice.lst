C51 COMPILER V9.53.0.0   INITDEVICE                                                        07/10/2017 21:21:02 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src\InitDevice.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\kburzin
                    -ski\SimplicityStudio\v4_workspace\BoldportTouchyAPIDemo\src\InitDevice.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNIN
                    -GLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\kburzinski\Simpli
                    -cityStudio\v4_workspace\BoldportTouchyAPIDemo\inc\config;C:/Users/kburzinski/SimplicityStudio/v4_workspace/BoldportTouch
                    -yAPIDemo/inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.4//Device/shared/si8051base;C:/SiliconLabs/Simp
                    -licityStudio/v4/developer/sdks/8051/v4.0.4//Device/EFM8SB1/inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4
                    -.0.4//Lib/efm8_capsense;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.4//Device/EFM8SB1/efm8_capsense/devi
                    -ce_layer) PRINT(.\src\InitDevice.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\InitDevice.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8SB1_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          // $[Library Includes]
  17          
  18          #include "cslib.h"
  19          // [Library Includes]$
  20          
  21          //==============================================================================
  22          // enter_DefaultMode_from_RESET
  23          //==============================================================================
  24          extern void enter_DefaultMode_from_RESET(void) {
  25   1              // $[Config Calls]
  26   1              // Save the SFRPAGE
  27   1              uint8_t SFRPAGE_save = SFRPAGE;
  28   1              PCA_0_enter_DefaultMode_from_RESET();
  29   1              PCACH_0_enter_DefaultMode_from_RESET();
  30   1              PCACH_1_enter_DefaultMode_from_RESET();
  31   1              PCACH_2_enter_DefaultMode_from_RESET();
  32   1              PORTS_0_enter_DefaultMode_from_RESET();
  33   1              PORTS_1_enter_DefaultMode_from_RESET();
  34   1              PBCFG_0_enter_DefaultMode_from_RESET();
  35   1              RTC_0_enter_DefaultMode_from_RESET();
  36   1              CLOCK_0_enter_DefaultMode_from_RESET();
  37   1              FLASH_0_enter_DefaultMode_from_RESET();
  38   1              CSLIB_0_enter_DefaultMode_from_RESET();
  39   1              // Restore the SFRPAGE
  40   1              SFRPAGE = SFRPAGE_save;
  41   1              // [Config Calls]$
  42   1      
  43   1      }
  44          
  45          extern void PBCFG_0_enter_DefaultMode_from_RESET(void) {
  46   1              // $[XBR2 - Port I/O Crossbar 2]
  47   1              /***********************************************************************
  48   1               - Weak Pullups disabled
  49   1               - Crossbar enabled
C51 COMPILER V9.53.0.0   INITDEVICE                                                        07/10/2017 21:21:02 PAGE 2   

  50   1               ***********************************************************************/
  51   1              SFRPAGE = 0x00;
  52   1              XBR2 = XBR2_WEAKPUD__PULL_UPS_DISABLED | XBR2_XBARE__ENABLED;
  53   1              // [XBR2 - Port I/O Crossbar 2]$
  54   1      
  55   1              // $[XBR0 - Port I/O Crossbar 0]
  56   1              // [XBR0 - Port I/O Crossbar 0]$
  57   1      
  58   1              // $[XBR1 - Port I/O Crossbar 1]
  59   1              /***********************************************************************
  60   1               - CEX0, CEX1 routed to Port pins
  61   1               - ECI unavailable at Port pin
  62   1               - T0 unavailable at Port pin
  63   1               - T1 unavailable at Port pin
  64   1               ***********************************************************************/
  65   1              XBR1 = XBR1_PCA0ME__CEX0_CEX1 | XBR1_ECIE__DISABLED | XBR1_T0E__DISABLED
  66   1                              | XBR1_T1E__DISABLED;
  67   1              // [XBR1 - Port I/O Crossbar 1]$
  68   1      
  69   1      }
  70          
  71          extern void PCA_0_enter_DefaultMode_from_RESET(void) {
  72   1              // $[PCA0MD - PCA Mode]
  73   1              /***********************************************************************
  74   1               - Disable Watchdog Timer
  75   1               - System clock divided by 12
  76   1               - PCA continues to function normally while the system controller is in
  77   1               Idle Mode
  78   1               - Disable the CF interrupt
  79   1               - Disable Watchdog Timer
  80   1               - Watchdog Timer Enable unlocked
  81   1               ***********************************************************************/
  82   1              SFRPAGE = 0x00;
  83   1              PCA0MD &= ~PCA0MD_WDTE__BMASK;
  84   1              PCA0MD = PCA0MD_CPS__SYSCLK_DIV_12 | PCA0MD_CIDL__NORMAL
  85   1                              | PCA0MD_ECF__OVF_INT_DISABLED | PCA0MD_WDTE__DISABLED
  86   1                              | PCA0MD_WDLCK__UNLOCKED;
  87   1              // [PCA0MD - PCA Mode]$
  88   1      
  89   1              // $[PCA0H - PCA Counter/Timer High Byte]
  90   1              // [PCA0H - PCA Counter/Timer High Byte]$
  91   1      
  92   1              // $[PCA0L - PCA Counter/Timer Low Byte]
  93   1              // [PCA0L - PCA Counter/Timer Low Byte]$
  94   1      
  95   1              // $[PCA0PWM - PCA PWM Configuration]
  96   1              // [PCA0PWM - PCA PWM Configuration]$
  97   1      
  98   1              // $[PCA0CN0 - PCA Control 0]
  99   1              /***********************************************************************
 100   1               - Start the PCA Counter/Timer running
 101   1               ***********************************************************************/
 102   1              PCA0CN0 |= PCA0CN0_CR__RUN;
 103   1              // [PCA0CN0 - PCA Control 0]$
 104   1      
 105   1      }
 106          
 107          extern void PCACH_2_enter_DefaultMode_from_RESET(void) {
 108   1              // $[PCA0 Settings Save]
 109   1              // Select Capture/Compare register)
 110   1              PCA0PWM &= ~PCA0PWM_ARSEL__BMASK;
 111   1              // [PCA0 Settings Save]$
 112   1      
C51 COMPILER V9.53.0.0   INITDEVICE                                                        07/10/2017 21:21:02 PAGE 3   

 113   1              // $[PCA0CPM2 - PCA Channel 2 Capture/Compare Mode]
 114   1              /***********************************************************************
 115   1               - Disable negative edge capture
 116   1               - Disable CCF2 interrupts
 117   1               - Enable match function
 118   1               - 8 to 11-bit PWM selected
 119   1               - Disable positive edge capture
 120   1               - Disable comparator function
 121   1               - Disable PWM function
 122   1               - Disable toggle function
 123   1               ***********************************************************************/
 124   1              PCA0CPM2 = PCA0CPM2_CAPN__DISABLED | PCA0CPM2_ECCF__DISABLED
 125   1                              | PCA0CPM2_MAT__ENABLED | PCA0CPM2_PWM16__8_BIT
 126   1                              | PCA0CPM2_CAPP__DISABLED | PCA0CPM2_ECOM__DISABLED
 127   1                              | PCA0CPM2_PWM__DISABLED | PCA0CPM2_TOG__DISABLED;
 128   1              // [PCA0CPM2 - PCA Channel 2 Capture/Compare Mode]$
 129   1      
 130   1              // $[PCA0CPL2 - PCA Channel 2 Capture Module Low Byte]
 131   1              // [PCA0CPL2 - PCA Channel 2 Capture Module Low Byte]$
 132   1      
 133   1              // $[PCA0CPH2 - PCA Channel 2 Capture Module High Byte]
 134   1              // [PCA0CPH2 - PCA Channel 2 Capture Module High Byte]$
 135   1      
 136   1              // $[Auto-reload]
 137   1              // [Auto-reload]$
 138   1      
 139   1              // $[PCA0 Settings Restore]
 140   1              // [PCA0 Settings Restore]$
 141   1      
 142   1      }
 143          
 144          extern void PORTS_0_enter_DefaultMode_from_RESET(void) {
 145   1              // $[P0 - Port 0 Pin Latch]
 146   1              // [P0 - Port 0 Pin Latch]$
 147   1      
 148   1              // $[P0MDOUT - Port 0 Output Mode]
 149   1              // [P0MDOUT - Port 0 Output Mode]$
 150   1      
 151   1              // $[P0MDIN - Port 0 Input Mode]
 152   1              /***********************************************************************
 153   1               - P0.0 pin is configured for digital mode
 154   1               - P0.1 pin is configured for analog mode
 155   1               - P0.2 pin is configured for analog mode
 156   1               - P0.3 pin is configured for analog mode
 157   1               - P0.4 pin is configured for digital mode
 158   1               - P0.5 pin is configured for digital mode
 159   1               - P0.6 pin is configured for analog mode
 160   1               - P0.7 pin is configured for digital mode
 161   1               ***********************************************************************/
 162   1              P0MDIN = P0MDIN_B0__DIGITAL | P0MDIN_B1__ANALOG | P0MDIN_B2__ANALOG
 163   1                              | P0MDIN_B3__ANALOG | P0MDIN_B4__DIGITAL | P0MDIN_B5__DIGITAL
 164   1                              | P0MDIN_B6__ANALOG | P0MDIN_B7__DIGITAL;
 165   1              // [P0MDIN - Port 0 Input Mode]$
 166   1      
 167   1              // $[P0SKIP - Port 0 Skip]
 168   1              /***********************************************************************
 169   1               - P0.0 pin is not skipped by the crossbar
 170   1               - P0.1 pin is skipped by the crossbar
 171   1               - P0.2 pin is skipped by the crossbar
 172   1               - P0.3 pin is skipped by the crossbar
 173   1               - P0.4 pin is skipped by the crossbar
 174   1               - P0.5 pin is skipped by the crossbar
 175   1               - P0.6 pin is skipped by the crossbar
C51 COMPILER V9.53.0.0   INITDEVICE                                                        07/10/2017 21:21:02 PAGE 4   

 176   1               - P0.7 pin is not skipped by the crossbar
 177   1               ***********************************************************************/
 178   1              P0SKIP = P0SKIP_B0__NOT_SKIPPED | P0SKIP_B1__SKIPPED | P0SKIP_B2__SKIPPED
 179   1                              | P0SKIP_B3__SKIPPED | P0SKIP_B4__SKIPPED | P0SKIP_B5__SKIPPED
 180   1                              | P0SKIP_B6__SKIPPED | P0SKIP_B7__NOT_SKIPPED;
 181   1              // [P0SKIP - Port 0 Skip]$
 182   1      
 183   1              // $[P0MASK - Port 0 Mask]
 184   1              // [P0MASK - Port 0 Mask]$
 185   1      
 186   1              // $[P0MAT - Port 0 Match]
 187   1              // [P0MAT - Port 0 Match]$
 188   1      
 189   1              // $[P0DRV - Port 0 Drive Strength]
 190   1              // [P0DRV - Port 0 Drive Strength]$
 191   1      
 192   1      }
 193          
 194          extern void PORTS_1_enter_DefaultMode_from_RESET(void) {
 195   1              // $[Missing Pin Skip]
 196   1              // [Missing Pin Skip]$
 197   1      
 198   1              // $[P1 - Port 1 Pin Latch]
 199   1              // [P1 - Port 1 Pin Latch]$
 200   1      
 201   1              // $[P1MDOUT - Port 1 Output Mode]
 202   1              // [P1MDOUT - Port 1 Output Mode]$
 203   1      
 204   1              // $[P1MDIN - Port 1 Input Mode]
 205   1              /***********************************************************************
 206   1               - P1.0 pin is configured for digital mode
 207   1               - P1.1 pin is configured for analog mode
 208   1               - P1.2 pin is configured for analog mode
 209   1               - P1.3 pin is configured for analog mode
 210   1               - P1.4 pin is configured for analog mode
 211   1               - P1.5 pin is configured for analog mode
 212   1               - P1.6 pin is configured for digital mode
 213   1               - P1.7 pin is configured for digital mode
 214   1               ***********************************************************************/
 215   1              P1MDIN = P1MDIN_B0__DIGITAL | P1MDIN_B1__ANALOG | P1MDIN_B2__ANALOG
 216   1                              | P1MDIN_B3__ANALOG | P1MDIN_B4__ANALOG | P1MDIN_B5__ANALOG
 217   1                              | P1MDIN_B6__DIGITAL | P1MDIN_B7__DIGITAL;
 218   1              // [P1MDIN - Port 1 Input Mode]$
 219   1      
 220   1              // $[P1SKIP - Port 1 Skip]
 221   1              /***********************************************************************
 222   1               - P1.0 pin is skipped by the crossbar
 223   1               - P1.1 pin is skipped by the crossbar
 224   1               - P1.2 pin is skipped by the crossbar
 225   1               - P1.3 pin is skipped by the crossbar
 226   1               - P1.4 pin is skipped by the crossbar
 227   1               - P1.5 pin is skipped by the crossbar
 228   1               - P1.6 pin is skipped by the crossbar
 229   1               - P1.7 pin is skipped by the crossbar
 230   1               ***********************************************************************/
 231   1              P1SKIP = P1SKIP_B0__SKIPPED | P1SKIP_B1__SKIPPED | P1SKIP_B2__SKIPPED
 232   1                              | P1SKIP_B3__SKIPPED | P1SKIP_B4__SKIPPED | P1SKIP_B5__SKIPPED
 233   1                              | P1SKIP_B6__SKIPPED | P1SKIP_B7__SKIPPED;
 234   1              // [P1SKIP - Port 1 Skip]$
 235   1      
 236   1              // $[P1MASK - Port 1 Mask]
 237   1              // [P1MASK - Port 1 Mask]$
 238   1      
C51 COMPILER V9.53.0.0   INITDEVICE                                                        07/10/2017 21:21:02 PAGE 5   

 239   1              // $[P1MAT - Port 1 Match]
 240   1              // [P1MAT - Port 1 Match]$
 241   1      
 242   1              // $[P1DRV - Port 1 Drive Strength]
 243   1              /***********************************************************************
 244   1               - P1.0 output has high output drive strength
 245   1               - P1.1 output has low output drive strength
 246   1               - P1.2 output has low output drive strength
 247   1               - P1.3 output has low output drive strength
 248   1               - P1.4 output has low output drive strength
 249   1               - P1.5 output has low output drive strength
 250   1               - P1.6 output has low output drive strength
 251   1               - P1.7 output has low output drive strength
 252   1               ***********************************************************************/
 253   1              SFRPAGE = 0x0F;
 254   1              P1DRV = P1DRV_B0__HIGH_DRIVE | P1DRV_B1__LOW_DRIVE | P1DRV_B2__LOW_DRIVE
 255   1                              | P1DRV_B3__LOW_DRIVE | P1DRV_B4__LOW_DRIVE | P1DRV_B5__LOW_DRIVE
 256   1                              | P1DRV_B6__LOW_DRIVE | P1DRV_B7__LOW_DRIVE;
 257   1              // [P1DRV - Port 1 Drive Strength]$
 258   1      
 259   1      }
 260          
 261          extern void CLOCK_0_enter_DefaultMode_from_RESET(void) {
 262   1              // $[CLKSEL - Clock Select]
 263   1              /***********************************************************************
 264   1               - SYSCLK is equal to selected clock source divided by 1
 265   1               - Clock derived from the Internal Low Power Oscillator
 266   1               ***********************************************************************/
 267   1              CLKSEL = CLKSEL_CLKDIV__SYSCLK_DIV_1 | CLKSEL_CLKSL__LPOSC;
 268   1              // Wait for the clock to be ready
 269   1              while ((CLKSEL & CLKSEL_CLKRDY__BMASK) != CLKSEL_CLKRDY__SET)
 270   1                      ;
 271   1              // [CLKSEL - Clock Select]$
 272   1      
 273   1      }
 274          
 275          extern void PCACH_0_enter_DefaultMode_from_RESET(void) {
 276   1              // $[PCA0 Settings Save]
 277   1              // Select Capture/Compare register)
 278   1              PCA0PWM &= ~PCA0PWM_ARSEL__BMASK;
 279   1              // [PCA0 Settings Save]$
 280   1      
 281   1              // $[PCA0CPM0 - PCA Channel 0 Capture/Compare Mode]
 282   1              /***********************************************************************
 283   1               - Disable negative edge capture
 284   1               - Disable CCF0 interrupts
 285   1               - Disable match function
 286   1               - 8 to 11-bit PWM selected
 287   1               - Disable positive edge capture
 288   1               - Enable comparator function
 289   1               - Enable PWM function
 290   1               - Disable toggle function
 291   1               ***********************************************************************/
 292   1              PCA0CPM0 = PCA0CPM0_CAPN__DISABLED | PCA0CPM0_ECCF__DISABLED
 293   1                              | PCA0CPM0_MAT__DISABLED | PCA0CPM0_PWM16__8_BIT
 294   1                              | PCA0CPM0_CAPP__DISABLED | PCA0CPM0_ECOM__ENABLED
 295   1                              | PCA0CPM0_PWM__ENABLED | PCA0CPM0_TOG__DISABLED;
 296   1              // [PCA0CPM0 - PCA Channel 0 Capture/Compare Mode]$
 297   1      
 298   1              // $[PCA0CPL0 - PCA Channel 0 Capture Module Low Byte]
 299   1              // [PCA0CPL0 - PCA Channel 0 Capture Module Low Byte]$
 300   1      
 301   1              // $[PCA0CPH0 - PCA Channel 0 Capture Module High Byte]
C51 COMPILER V9.53.0.0   INITDEVICE                                                        07/10/2017 21:21:02 PAGE 6   

 302   1              // [PCA0CPH0 - PCA Channel 0 Capture Module High Byte]$
 303   1      
 304   1              // $[Auto-reload]
 305   1              // [Auto-reload]$
 306   1      
 307   1              // $[PCA0 Settings Restore]
 308   1              // [PCA0 Settings Restore]$
 309   1      
 310   1      }
 311          
 312          extern void RTC_0_enter_DefaultMode_from_RESET(void) {
 313   1              // $[RTC Initialization]
 314   1              // [RTC Initialization]$
 315   1      
 316   1              // $[RTC0XCN0 - RTC Oscillator Control: Initial start-up setting]
 317   1              // [RTC0XCN0 - RTC Oscillator Control: Initial start-up setting]$
 318   1      
 319   1              // $[RTC0XCN - RTC Oscillator Control]
 320   1              // [RTC0XCN - RTC Oscillator Control]$
 321   1      
 322   1              // $[RTC0XCF - RTC Oscillator Configuration]
 323   1              /***********************************************************************
 324   1               - Disable load capacitance stepping
 325   1               - Load Capacitance Programmed Value = 0x07
 326   1               ***********************************************************************/
 327   1              RTC0ADR = RTC0XCF;
 328   1              RTC0DAT = RTC0XCF_AUTOSTP__DISABLED | (0x07 << RTC0XCF_LOADCAP__SHIFT);
 329   1              while ((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET)
 330   1                      ;    //Poll Busy Bit
 331   1              // [RTC0XCF - RTC Oscillator Configuration]$
 332   1      
 333   1              // $[CAPTURE0 - RTC Timer Capture 0]
 334   1              // [CAPTURE0 - RTC Timer Capture 0]$
 335   1      
 336   1              // $[CAPTURE1 - RTC Timer Capture 1]
 337   1              // [CAPTURE1 - RTC Timer Capture 1]$
 338   1      
 339   1              // $[CAPTURE2 - RTC Timer Capture 2]
 340   1              // [CAPTURE2 - RTC Timer Capture 2]$
 341   1      
 342   1              // $[CAPTURE3 - RTC Timer Capture 3]
 343   1              // [CAPTURE3 - RTC Timer Capture 3]$
 344   1      
 345   1              // $[ALARM0 - RTC Alarm Programmed Value 0]
 346   1              /***********************************************************************
 347   1               - RTC Alarm Programmed Value 0 = 0x14
 348   1               ***********************************************************************/
 349   1              RTC0ADR = ALARM0;
 350   1              RTC0DAT = (0x14 << ALARM0_ALARM0__SHIFT);
 351   1              while ((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET)
 352   1                      ;    //Poll Busy Bit
 353   1              // [ALARM0 - RTC Alarm Programmed Value 0]$
 354   1      
 355   1              // $[ALARM1 - RTC Alarm Programmed Value 1]
 356   1              // [ALARM1 - RTC Alarm Programmed Value 1]$
 357   1      
 358   1              // $[ALARM2 - RTC Alarm Programmed Value 2]
 359   1              // [ALARM2 - RTC Alarm Programmed Value 2]$
 360   1      
 361   1              // $[ALARM3 - RTC Alarm Programmed Value 3]
 362   1              // [ALARM3 - RTC Alarm Programmed Value 3]$
 363   1      
 364   1              // $[RTC0CN - RTC Control]
C51 COMPILER V9.53.0.0   INITDEVICE                                                        07/10/2017 21:21:02 PAGE 7   

 365   1              /***********************************************************************
 366   1               - Enable RTC oscillator
 367   1               - RTC timer is stopped
 368   1               - Disable missing RTC detector
 369   1               - Disable RTC alarm
 370   1               - Alarm event flag is not set or disable the auto reset function
 371   1               - Do not start a capture operation
 372   1               - Do not start a set operation
 373   1               ***********************************************************************/
 374   1              RTC0ADR = RTC0CN0;
 375   1              RTC0DAT = RTC0CN0_RTC0EN__ENABLED | RTC0CN0_RTC0TR__STOP
 376   1                              | RTC0CN0_MCLKEN__DISABLED | RTC0CN0_RTC0AEN__DISABLED
 377   1                              | RTC0CN0_ALRM__NOT_SET | RTC0CN0_RTC0CAP__NOT_SET
 378   1                              | RTC0CN0_RTC0SET__NOT_SET;
 379   1              while ((RTC0ADR & RTC0ADR_BUSY__BMASK) == RTC0ADR_BUSY__SET)
 380   1                      ;    //Poll Busy Bit
 381   1      
 382   1              // [RTC0CN - RTC Control]$
 383   1      
 384   1              // $[External Oscillator Setup]
 385   1              // [External Oscillator Setup]$
 386   1      
 387   1      }
 388          
 389          extern void CSLIB_0_enter_DefaultMode_from_RESET(void) {
 390   1              // $[CSLIB Init]
 391   1      
 392   1              // -----------------------------------------------------------------------------
 393   1              // Configures all peripherals controlled by capsense, including the sensing block
 394   1              // and port pins
 395   1              // -----------------------------------------------------------------------------
 396   1              CSLIB_initHardware();
 397   1      
 398   1              // -----------------------------------------------------------------------------
 399   1              // Initializes capsense variables and performs some scans to initialize the
 400   1              // baselines
 401   1              // -----------------------------------------------------------------------------
 402   1              CSLIB_initLibrary();
 403   1      
 404   1              // [CSLIB Init]$
 405   1      
 406   1      }
 407          
 408          extern void SiLabs_Startup(void) {
 409   1              // $[SiLabs Startup]
 410   1              /*
 411   1               // WDTE (Watchdog Timer Enable) = DISABLED (Disable Watchdog Timer.)
 412   1               */
 413   1              PCA0MD &= ~PCA0MD_WDTE__BMASK;
 414   1      
 415   1              // [SiLabs Startup]$
 416   1      
 417   1      }
 418          
 419          extern void VREG_0_enter_DefaultMode_from_RESET(void) {
 420   1      
 421   1      }
 422          
 423          extern void HFOSC_0_enter_DefaultMode_from_RESET(void) {
 424   1      
 425   1      }
 426          
 427          extern void TIMER01_0_enter_DefaultMode_from_RESET(void) {
C51 COMPILER V9.53.0.0   INITDEVICE                                                        07/10/2017 21:21:02 PAGE 8   

 428   1      
 429   1      }
 430          
 431          extern void TIMER_SETUP_0_enter_DefaultMode_from_RESET(void) {
 432   1      
 433   1      }
 434          
 435          extern void TIMER16_3_enter_DefaultMode_from_RESET(void) {
 436   1      
 437   1      }
 438          
 439          extern void FLASH_0_enter_DefaultMode_from_RESET(void) {
 440   1              // $[FLSCL - Flash Scale]
 441   1              /***********************************************************************
 442   1               - The system clock determines the flash read time
 443   1               ***********************************************************************/
 444   1              FLSCL = FLSCL_BYPASS__SYSCLK;
 445   1              // [FLSCL - Flash Scale]$
 446   1      
 447   1      }
 448          
 449          extern void PCACH_1_enter_DefaultMode_from_RESET(void) {
 450   1              // $[PCA0 Settings Save]
 451   1              // Select Capture/Compare register)
 452   1              PCA0PWM &= ~PCA0PWM_ARSEL__BMASK;
 453   1              // [PCA0 Settings Save]$
 454   1      
 455   1              // $[PCA0CPM1 - PCA Channel 1 Capture/Compare Mode]
 456   1              /***********************************************************************
 457   1               - Disable negative edge capture
 458   1               - Disable CCF1 interrupts
 459   1               - Disable match function
 460   1               - 8 to 11-bit PWM selected
 461   1               - Disable positive edge capture
 462   1               - Enable comparator function
 463   1               - Enable PWM function
 464   1               - Disable toggle function
 465   1               ***********************************************************************/
 466   1              PCA0CPM1 = PCA0CPM1_CAPN__DISABLED | PCA0CPM1_ECCF__DISABLED
 467   1                              | PCA0CPM1_MAT__DISABLED | PCA0CPM1_PWM16__8_BIT
 468   1                              | PCA0CPM1_CAPP__DISABLED | PCA0CPM1_ECOM__ENABLED
 469   1                              | PCA0CPM1_PWM__ENABLED | PCA0CPM1_TOG__DISABLED;
 470   1              // [PCA0CPM1 - PCA Channel 1 Capture/Compare Mode]$
 471   1      
 472   1              // $[PCA0CPL1 - PCA Channel 1 Capture Module Low Byte]
 473   1              // [PCA0CPL1 - PCA Channel 1 Capture Module Low Byte]$
 474   1      
 475   1              // $[PCA0CPH1 - PCA Channel 1 Capture Module High Byte]
 476   1              // [PCA0CPH1 - PCA Channel 1 Capture Module High Byte]$
 477   1      
 478   1              // $[Auto-reload]
 479   1              // [Auto-reload]$
 480   1      
 481   1              // $[PCA0 Settings Restore]
 482   1              // [PCA0 Settings Restore]$
 483   1      
 484   1      }
 485          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    165    ----
   CONSTANT SIZE    =   ----    ----
C51 COMPILER V9.53.0.0   INITDEVICE                                                        07/10/2017 21:21:02 PAGE 9   

   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
