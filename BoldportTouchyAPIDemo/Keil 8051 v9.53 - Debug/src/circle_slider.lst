C51 COMPILER V9.53.0.0   CIRCLE_SLIDER                                                     07/10/2017 21:21:02 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE CIRCLE_SLIDER
OBJECT MODULE PLACED IN .\src\circle_slider.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\kburzin
                    -ski\SimplicityStudio\v4_workspace\BoldportTouchyAPIDemo\src\circle_slider.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WAR
                    -NINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\kburzinski\Sim
                    -plicityStudio\v4_workspace\BoldportTouchyAPIDemo\inc\config;C:/Users/kburzinski/SimplicityStudio/v4_workspace/BoldportTo
                    -uchyAPIDemo/inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.4//Device/shared/si8051base;C:/SiliconLabs/S
                    -implicityStudio/v4/developer/sdks/8051/v4.0.4//Device/EFM8SB1/inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051
                    -/v4.0.4//Lib/efm8_capsense;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.4//Device/EFM8SB1/efm8_capsense/d
                    -evice_layer) PRINT(.\src\circle_slider.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\circle_slider.OBJ)

line level    source

   1          /**************************************************************************//**
   2           * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3           *
   4           * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5           *****************************************************************************/
   6          #include <SI_EFM8SB1_Register_Enums.h>                  // SFR declarations
   7          #include "circle_slider.h"
   8          #include "cslib_config.h"
   9          #include "cslib.h"
  10          #include "touchy.h"
  11          
  12          
  13          // Given an angle, normalize the angle
  14          // to between 0 and 360 degrees [0, 360)
  15          void NormalizeAngle(uint16_t* angle)
  16          {
  17   1              while (*angle >= 360)
  18   1              {
  19   2                      *angle -= 360;
  20   2              }
  21   1      }
  22          
  23          bool IsTouchQualified(void)
  24          {
  25   1        uint8_t sensor_index;
  26   1        uint16_t touch_sum = 0;
  27   1      
  28   1        // Only update the slider if at least one of the CS0 channels is active
  29   1        if (CSLIB_isSensorDebounceActive(TS_CS0) ||
  30   1            CSLIB_isSensorDebounceActive(TS_CS1) ||
  31   1            CSLIB_isSensorDebounceActive(TS_CS2))
  32   1        {
  33   2          // For each sensor, calculate the delta between the current
  34   2          // capacitance value and baseline capacitance value, or delta
  35   2          for (sensor_index = TS_CS0; sensor_index <= TS_CS2; sensor_index++)
  36   2          {
  37   3              if (CSLIB_node[sensor_index].processBuffer[0] >= CSLIB_node[sensor_index].currentBaseline)
  38   3              {
  39   4                  touch_sum += ((CSLIB_node[sensor_index].processBuffer[0] - CSLIB_node[sensor_index].currentBas
             -eline) >> 8);
  40   4              }
  41   3          }
  42   2      
  43   2          // Sum of touch deltas must reach a minimum threshold
  44   2          // before updating circle slider position.
  45   2          //
  46   2          // This helps reduce jumpiness when the touch
  47   2          // is being released due to non-linear capacitance
  48   2          // response
C51 COMPILER V9.53.0.0   CIRCLE_SLIDER                                                     07/10/2017 21:21:02 PAGE 2   

  49   2          if (touch_sum > MIN_SUM_TOUCH)
  50   2          {
  51   3            return true;
  52   3          }
  53   2        }
  54   1      
  55   1        return false;
  56   1      }
  57          
  58          // Perform the centroid algorithm to determine the wheel angle position
  59          // (0 degrees is 12 o'clock, 90 degrees is 3 o'clock)
  60          //
  61          // Sensor orientation:
  62          //
  63          // CS1 CS2
  64          //   CS0
  65          //
  66          uint16_t CalculatePosition()
  67          {
  68   1          uint8_t sensor_index;
  69   1          uint16_t angle = 0;
  70   1          uint16_t deltas[3];
  71   1          uint16_t weights[3];
  72   1          uint16_t offset;
  73   1      
  74   1          // For each sensor, calculate the delta between the current
  75   1          // capacitance value and baseline capacitance value, or delta
  76   1          for (sensor_index = TS_CS0; sensor_index <= TS_CS2; sensor_index++)
  77   1          {
  78   2              if (CSLIB_node[sensor_index].processBuffer[0] < CSLIB_node[sensor_index].currentBaseline)
  79   2              {
  80   3                  deltas[sensor_index - TS_CS0] = 0;
  81   3              }
  82   2              else
  83   2              {
  84   3                  deltas[sensor_index - TS_CS0] = (CSLIB_node[sensor_index].processBuffer[0] - CSLIB_node[sensor
             -_index].currentBaseline) >> 8;
  85   3              }
  86   2          }
  87   1      
  88   1          // CS0 touch delta is highest, perform weighted linear slider
  89   1          // binning algorithm to assign a value between 20 - 60
  90   1          if (deltas[0] >= deltas[2] &&
  91   1              deltas[0] >= deltas[1])
  92   1          {
  93   2              // Binned weights by sensor position:
  94   2              // CS1:60 CS2:20
  95   2              //    CS0:40
  96   2              weights[0] = 40;
  97   2              weights[1] = 60;
  98   2              weights[2] = 20;
  99   2      
 100   2              // An average weighted value of 20 equals 60 degrees
 101   2              offset = 60;
 102   2          }
 103   1          // CS2 touch delta is highest, perform weighted linear slider
 104   1          // binning algorithm to assign a value between 20 - 60
 105   1          else if (deltas[2] >= deltas[0] &&
 106   1                   deltas[2] >= deltas[1])
 107   1          {
 108   2              // Binned weights by sensor position:
 109   2              // CS1:20 CS2:40
 110   2              //    CS0:60
C51 COMPILER V9.53.0.0   CIRCLE_SLIDER                                                     07/10/2017 21:21:02 PAGE 3   

 111   2              weights[0] = 60;
 112   2              weights[1] = 20;
 113   2              weights[2] = 40;
 114   2      
 115   2              // An average weighted value of 20 equals -60 degrees, or 300 degrees
 116   2              offset = 300;
 117   2          }
 118   1          // CS1 touch delta is highest, perform weighted linear slider
 119   1          // binning algorithm to assign a value between 20 - 60
 120   1          else
 121   1          {
 122   2              // Binned weights by sensor position:
 123   2              // CS1:40 CS2:60
 124   2              //   CS0:20
 125   2              weights[0] = 20;
 126   2              weights[1] = 40;
 127   2              weights[2] = 60;
 128   2      
 129   2              // An average weighted value of 20 equals 180 degrees
 130   2              offset = 180;
 131   2          }
 132   1      
 133   1          // Calculate the angle using binned weights and offset from above
 134   1      
 135   1          // Apply calculated binned weights to get a value between [20, 60]
 136   1          angle = (deltas[0] * weights[0] + deltas[1] * weights[1] + deltas[2] * weights[2]) / (deltas[0] + delt
             -as[1] + deltas[2]);
 137   1      
 138   1          // Convert binned value from [20, 60] to [0, 240]
 139   1          angle = (6 * angle) - 120;
 140   1      
 141   1          // Apply offset
 142   1          angle += offset;
 143   1      
 144   1          // Normalize angle between [0, 360)
 145   1          NormalizeAngle(&angle);
 146   1      
 147   1          return angle;
 148   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    497    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      18
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
