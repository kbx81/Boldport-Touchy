C51 COMPILER V9.53.0.0   HARDWARE_ROUTINES                                                 07/10/2017 21:21:09 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE HARDWARE_ROUTINES
OBJECT MODULE PLACED IN .\lib\efm8sb1\cslib\device_layer\hardware_routines.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\kburzin
                    -ski\SimplicityStudio\v4_workspace\BoldportTouchyAPIDemo\lib\efm8sb1\cslib\device_layer\hardware_routines.c OMF2 SMALL DE
                    -BUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE
                    - INCDIR(C:\Users\kburzinski\SimplicityStudio\v4_workspace\BoldportTouchyAPIDemo\inc\config;C:/Users/kburzinski/Simplicit
                    -yStudio/v4_workspace/BoldportTouchyAPIDemo/inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.4//Device/sha
                    -red/si8051base;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.4//Device/EFM8SB1/inc;C:/SiliconLabs/Simplici
                    -tyStudio/v4/developer/sdks/8051/v4.0.4//Lib/efm8_capsense;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.4/
                    -/Device/EFM8SB1/efm8_capsense/device_layer) PRINT(.\lib\efm8sb1\cslib\device_layer\hardware_routines.lst) COND PAGEWIDTH
                    -(120) PAGELENGTH(65) OBJECT(.\lib\efm8sb1\cslib\device_layer\hardware_routines.OBJ)

line level    source

   1          /**************************************************************************//**
   2           * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3           *
   4           * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5           *****************************************************************************/
   6          
   7          #include "cslib_config.h"
   8          #include "cslib.h"
   9          
  10          #include "hardware_routines.h"
  11          #include "cslib_hwconfig.h"
  12          #include "SI_EFM8SB1_Defs.h"
  13          
  14          
  15          idata TechSpecificStruct_t CSLIB_techSpec[DEF_NUM_SENSORS];
  16          #define disableSleepAndStall 0
  17          //-----------------------------------------------------------------------------
  18          // Local function prototypes
  19          //-----------------------------------------------------------------------------
  20          void configureCS0ActiveMode(void);
  21          void configurePortsActiveMode(void);
  22          //-----------------------------------------------------------------------------
  23          // setMux
  24          //-----------------------------------------------------------------------------
  25          //
  26          // Low level access to the CS0MUX register.  This is called by scanSensor().
  27          //
  28          void setMux(uint8_t muxValue)
  29          {
  30   1         CS0MX = muxValue;
  31   1      }
  32          
  33          //-----------------------------------------------------------------------------
  34          // setGain
  35          //-----------------------------------------------------------------------------
  36          //
  37          // Low level access to the gain bits.  This is called by scanSensor().
  38          //
  39          void setGain(uint8_t gainValue)
  40          {
  41   1         CS0MD1 = 0x07 & gainValue;         // clear all bits except gain bits
  42   1      }
  43          
  44          //-----------------------------------------------------------------------------
  45          // readGain
  46          //-----------------------------------------------------------------------------
  47          //
  48          // Returns the gain bits of the sensor.
C51 COMPILER V9.53.0.0   HARDWARE_ROUTINES                                                 07/10/2017 21:21:09 PAGE 2   

  49          //
  50          uint8_t readGain(void)
  51          {
  52   1         return CS0MD1 & 0x07;
  53   1      }
  54          
  55          //-----------------------------------------------------------------------------
  56          // readMux
  57          //-----------------------------------------------------------------------------
  58          //
  59          // Returns the mux value from the sensor peripheral.
  60          //
  61          uint8_t readMux(void)
  62          {
  63   1         return CS0MX;
  64   1      }
  65          
  66          //-----------------------------------------------------------------------------
  67          // setAccumulation
  68          //-----------------------------------------------------------------------------
  69          //
  70          // Sets the accumulation bits of the sensor register.
  71          //
  72          void setAccumulation(uint8_t accumulation)
  73          {
  74   1         CS0CF = 0x07 & accumulation;        // Clear all bits except accumulation
  75   1      }
  76          
  77          
  78          //-----------------------------------------------------------------------------
  79          // executeConversion
  80          //-----------------------------------------------------------------------------
  81          //
  82          // Assumes that the performance characteristics of the sensor have already
  83          // been configured.  Enables the sensor, starts a scan, blocks until
  84          // the scan is complete.
  85          // Note that this version of executeConversion() allows for a retrieval
  86          // of sensor data from the serial port through a call to getU16().  This
  87          // is a compile-time switch.
  88          //
  89          uint16_t executeConversion(void)
  90          {
  91   1      
  92   1            SI_UU16_t scanResult;
  93   1      
  94   1            CS0CN0 = 0x88;                       // Enable CS0, Enable Digital Comparator
  95   1      
  96   1            CS0CN0 &= ~0x20;                     // Clear the CS0 INT flag
  97   1      
  98   1            CS0CN0 |= 0x10;                      // Set CS0BUSY to begin conversion
  99   1      
 100   1            if(disableSleepAndStall == 0)
 101   1            {
 102   2               PMU0FL = 0x01;
 103   2               PMU0CF = 0x40;                           // Enter suspend until conversion completes
 104   2            }
 105   1      
 106   1            while (!(CS0CN0 & 0x20));            // Wait in foreground
 107   1      
 108   1      
 109   1            scanResult.u8[MSB] = CS0DH;         // Read Result
 110   1            scanResult.u8[LSB] = CS0DL;
 111   1      
C51 COMPILER V9.53.0.0   HARDWARE_ROUTINES                                                 07/10/2017 21:21:09 PAGE 3   

 112   1            CS0CN0 = 0x00;                       // Disable CS0
 113   1      
 114   1            return scanResult.u16;
 115   1      
 116   1      
 117   1      }
 118          
 119          
 120          
 121          
 122          //-----------------------------------------------------------------------------
 123          // configureSensorForActiveMode
 124          //-----------------------------------------------------------------------------
 125          //
 126          // This is a top-level call to configure the sensor to its operational state
 127          // during active mode.
 128          //
 129          void configureSensorForActiveMode(void)
 130          {
 131   1         configurePortsActiveMode();
 132   1         configureCS0ActiveMode();
 133   1      }
 134          
 135          //-----------------------------------------------------------------------------
 136          // scanSensor
 137          //-----------------------------------------------------------------------------
 138          //
 139          // This is a top-level function that assumes there is a sensor node struct
 140          // with CS0-related controls.  This is called by the library to execute
 141          // one scan of one sensor node.  Note that the sensor output is returned
 142          // and not saved to buffers in this routine.  Saving is the responsibility
 143          // of the library routines.
 144          //
 145          uint16_t scanSensor(uint8_t nodeIndex)
 146          {
 147   1         setMux(CSLIB_techSpec[nodeIndex].mux);
 148   1         setGain(CSLIB_techSpec[nodeIndex].gain);
 149   1         setAccumulation(CSLIB_techSpec[nodeIndex].accumulation);
 150   1         return executeConversion();
 151   1      }
 152          
 153          
 154          
 155          
 156          //-----------------------------------------------------------------------------
 157          // Local hardware access functions
 158          //-----------------------------------------------------------------------------
 159          
 160          
 161          
 162          //-----------------------------------------------------------------------------
 163          // configureCS0ActiveMode
 164          //-----------------------------------------------------------------------------
 165          //
 166          // This is a low-level local routine to handle configuration of the CS0 block.
 167          //
 168          void configureCS0ActiveMode(void)
 169          {
 170   1      
 171   1              CS0CF = 0x00;                         // MODE: CS0BUSY
 172   1         CS0MD2 &= 0xC0;                       // 12-bit mode
 173   1         CS0MD2 |= 0x40;
 174   1         CS0THH = 0;
C51 COMPILER V9.53.0.0   HARDWARE_ROUTINES                                                 07/10/2017 21:21:09 PAGE 4   

 175   1         CS0THL = 0;
 176   1      
 177   1         CS0CN0 = 0x88;                       // Enable CS0, Enable Digital Comparator
 178   1      
 179   1         CS0CN0 &= ~0x20;
 180   1      
 181   1         CS0CN0 |= 0x10;                      // Set CS0BUSY to begin conversion
 182   1         while (!(CS0CN0 & 0x20));            // Wait in foreground
 183   1      
 184   1         CS0CN0 = 0x00;                       // Disable CS0
 185   1      
 186   1      }
 187          
 188          
 189          //-----------------------------------------------------------------------------
 190          // configurePortsActiveMode
 191          //-----------------------------------------------------------------------------
 192          //
 193          // This is a low-level local routine to handle configuration of the ports
 194          // for active mode.
 195          //
 196          void configurePortsActiveMode(void)
 197          {
 198   1         P0MDIN |= SLEEP_MODE_MASK_P0;
 199   1         P1MDIN |= SLEEP_MODE_MASK_P1;
 200   1      
 201   1         P0MDOUT |= ACTIVE_MODE_MASK_P0;
 202   1         P0 &= ~ACTIVE_MODE_MASK_P0;
 203   1         P0MDIN &=~ACTIVE_MODE_MASK_P0;            // Set P1.0 and 1.1 to analog
 204   1         P0MDOUT &= ~ACTIVE_MODE_MASK_P0;
 205   1         P0 |= ACTIVE_MODE_MASK_P0;
 206   1      
 207   1         P1MDOUT |= ACTIVE_MODE_MASK_P1;
 208   1         P1 &= ~ACTIVE_MODE_MASK_P1;
 209   1         P1MDIN &=~ACTIVE_MODE_MASK_P1;            // Set P1.0 and 1.1 to analog
 210   1         P1MDOUT &= ~ACTIVE_MODE_MASK_P1;
 211   1         P1 |= ACTIVE_MODE_MASK_P1;
 212   1      
 213   1      
 214   1      }
 215          
 216          
 217          
 218          void nodeInit(uint8_t sensorIndex)
 219          {
 220   1        CSLIB_techSpec[sensorIndex].gain = CSLIB_gainValues[sensorIndex];
 221   1        CSLIB_techSpec[sensorIndex].mux = CSLIB_muxValues[sensorIndex];
 222   1        CSLIB_techSpec[sensorIndex].accumulation = CSLIB_accumulationValues[sensorIndex];
 223   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    226    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       2
   IDATA SIZE       =     27    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
C51 COMPILER V9.53.0.0   HARDWARE_ROUTINES                                                 07/10/2017 21:21:09 PAGE 5   

END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
