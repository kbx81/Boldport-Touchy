C51 COMPILER V9.53.0.0   INTERRUPTS                                                        07/20/2017 23:18:02 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INTERRUPTS
OBJECT MODULE PLACED IN .\src\Interrupts.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\kburzin
                    -ski\SimplicityStudio\v4_workspace\BoldportTouchyIOFirmware\src\Interrupts.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WAR
                    -NINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\kburzinski\Sim
                    -plicityStudio\v4_workspace\BoldportTouchyIOFirmware\inc\config;C:/Users/kburzinski/SimplicityStudio/v4_workspace/Boldpor
                    -tTouchyIOFirmware/inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.4//Device/shared/si8051base;C:/Silicon
                    -Labs/SimplicityStudio/v4/developer/sdks/8051/v4.0.4//Device/EFM8SB1/inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdk
                    -s/8051/v4.0.4//Lib/efm8_capsense;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.4//Device/EFM8SB1/efm8_caps
                    -ense/device_layer) PRINT(.\src\Interrupts.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\Interrupts.OBJ)

line level    source

   1          //=========================================================
   2          // src/Interrupts.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8SB1_Register_Enums.h>
  11          #include "touchy.h"
  12          #include "main.h"
  13          
  14          //-----------------------------------------------------------------------------
  15          // UART0_ISR
  16          //-----------------------------------------------------------------------------
  17          //
  18          // UART0 ISR Content goes here. Remember to clear flag bits:
  19          // SCON0::RI (Receive Interrupt Flag)
  20          // SCON0::TI (Transmit Interrupt Flag)
  21          //
  22          //-----------------------------------------------------------------------------
  23          SI_INTERRUPT (UART0_ISR, UART0_IRQn)
  24          {
  25   1              static uint8_t rxByteNumber = 0, txByteNumber = 0, newByte = 0;
  26   1      
  27   1      #ifdef ACTIVITY_LED
                      TouchyLEDOn(ACTIVITY_LED);
              #endif
  30   1      
  31   1              if (SCON0_RI == 1) {
  32   2                      if (rxByteNumber < UART_BUFFERSIZE) {
  33   3                              newByte = SBUF0;        // get the byte we just received
  34   3      
  35   3                              SCON0_RI = 0;           // clear interrupt flag since we have the data now
  36   3      
  37   3                              rxBuffer[rxByteNumber] = newByte;       // write the received byte into the buffer
  38   3      
  39   3                              rxByteNumber++;                         // increment our counter
  40   3      
  41   3                              rxBufferReady = false;          // buffer is not ready/complete at this point, unless...
  42   3      
  43   3                              if (rxByteNumber >= UART_BUFFERSIZE) {
  44   4                                      rxByteNumber = 0;               // ...reset it if it maxed out
  45   4      
  46   4                                      if (rxBuffer[0] & SOF) {
  47   5                                              rxBufferReady = true;   // if SOF is valid, indicate that the buffer is now valid
  48   5                                      }
  49   4                                      else {
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        07/20/2017 23:18:02 PAGE 2   

  50   5                                              flags |= RXERROR;               // indicate a receive error probably occurred
  51   5                                      }
  52   4      
  53   4                                      if (rxBuffer[0] & TXERROR) {
  54   5                                              flags |= TXERROR;               // set flag if the host indicated an error
  55   5                                      }
  56   4                              }
  57   3                      }
  58   2                      else {                                          // we should never end up here. just a safety thing...
  59   3                              rxByteNumber = 0;
  60   3                      }
  61   2              }
  62   1      
  63   1              if (SCON0_TI == 1) {                    // check if transmit flag is set
  64   2                      SCON0_TI = 0;                           // clear interrupt flag
  65   2      
  66   2                      if (txByteNumber < UART_BUFFERSIZE) {   // if there are more bytes to transmit...
  67   3                              SBUF0 = txBuffer[txByteNumber];         // send the next byte
  68   3      
  69   3                              txByteNumber++;                 // update counter
  70   3                      }
  71   2                      else {
  72   3                              txByteNumber = 0;               // Reset the counter
  73   3      
  74   3                              txReady = true;                 // Indicate transmission complete
  75   3                      }
  76   2              }
  77   1      
  78   1      #ifdef ACTIVITY_LED
                      TouchyLEDOff(ACTIVITY_LED);
              #endif
  81   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    109    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
